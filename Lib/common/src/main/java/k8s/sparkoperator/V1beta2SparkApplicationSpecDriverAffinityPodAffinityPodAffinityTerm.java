package k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm {

    private V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTermLabelSelector labelSelector;


    private List<String> namespaces = null;


    private String topologyKey;


    public V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm labelSelector(V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTermLabelSelector labelSelector) {

        this.labelSelector = labelSelector;
        return this;
    }

    /**
     * Get labelSelector
     *
     * @return labelSelector
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTermLabelSelector getLabelSelector() {
        return labelSelector;
    }


    public void setLabelSelector(V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTermLabelSelector labelSelector) {
        this.labelSelector = labelSelector;
    }


    public V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm namespaces(List<String> namespaces) {

        this.namespaces = namespaces;
        return this;
    }

    public V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm addNamespacesItem(String namespacesItem) {
        if (this.namespaces == null) {
            this.namespaces = new ArrayList<>();
        }
        this.namespaces.add(namespacesItem);
        return this;
    }

    /**
     * Get namespaces
     *
     * @return namespaces
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<String> getNamespaces() {
        return namespaces;
    }


    public void setNamespaces(List<String> namespaces) {
        this.namespaces = namespaces;
    }


    public V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm topologyKey(String topologyKey) {

        this.topologyKey = topologyKey;
        return this;
    }

    /**
     * Get topologyKey
     *
     * @return topologyKey
     **/
    @ApiModelProperty(required = true, value = "")

    public String getTopologyKey() {
        return topologyKey;
    }


    public void setTopologyKey(String topologyKey) {
        this.topologyKey = topologyKey;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm v1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm = (V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm) o;
        return Objects.equals(this.labelSelector,
                v1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm.labelSelector) &&
                Objects.equals(this.namespaces,
                        v1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm.namespaces) &&
                Objects.equals(this.topologyKey,
                        v1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm.topologyKey);
    }

    @Override
    public int hashCode() {
        return Objects.hash(labelSelector, namespaces, topologyKey);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm {\n");
        sb.append("    labelSelector: ").append(toIndentedString(labelSelector)).append("\n");
        sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
        sb.append("    topologyKey: ").append(toIndentedString(topologyKey)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

