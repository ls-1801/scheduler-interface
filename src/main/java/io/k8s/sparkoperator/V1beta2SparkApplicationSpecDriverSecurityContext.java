package io.k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDriverSecurityContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDriverSecurityContext {

    private Boolean allowPrivilegeEscalation;


    private V1beta2SparkApplicationSpecDriverSecurityContextCapabilities capabilities;


    private Boolean privileged;


    private String procMount;


    private Boolean readOnlyRootFilesystem;


    private Long runAsGroup;


    private Boolean runAsNonRoot;


    private Long runAsUser;


    private V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions seLinuxOptions;


    private V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions windowsOptions;


    public V1beta2SparkApplicationSpecDriverSecurityContext allowPrivilegeEscalation(Boolean allowPrivilegeEscalation) {

        this.allowPrivilegeEscalation = allowPrivilegeEscalation;
        return this;
    }

    /**
     * Get allowPrivilegeEscalation
     *
     * @return allowPrivilegeEscalation
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getAllowPrivilegeEscalation() {
        return allowPrivilegeEscalation;
    }


    public void setAllowPrivilegeEscalation(Boolean allowPrivilegeEscalation) {
        this.allowPrivilegeEscalation = allowPrivilegeEscalation;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext capabilities(V1beta2SparkApplicationSpecDriverSecurityContextCapabilities capabilities) {

        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get capabilities
     *
     * @return capabilities
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverSecurityContextCapabilities getCapabilities() {
        return capabilities;
    }


    public void setCapabilities(V1beta2SparkApplicationSpecDriverSecurityContextCapabilities capabilities) {
        this.capabilities = capabilities;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext privileged(Boolean privileged) {

        this.privileged = privileged;
        return this;
    }

    /**
     * Get privileged
     *
     * @return privileged
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getPrivileged() {
        return privileged;
    }


    public void setPrivileged(Boolean privileged) {
        this.privileged = privileged;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext procMount(String procMount) {

        this.procMount = procMount;
        return this;
    }

    /**
     * Get procMount
     *
     * @return procMount
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getProcMount() {
        return procMount;
    }


    public void setProcMount(String procMount) {
        this.procMount = procMount;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext readOnlyRootFilesystem(Boolean readOnlyRootFilesystem) {

        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
        return this;
    }

    /**
     * Get readOnlyRootFilesystem
     *
     * @return readOnlyRootFilesystem
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getReadOnlyRootFilesystem() {
        return readOnlyRootFilesystem;
    }


    public void setReadOnlyRootFilesystem(Boolean readOnlyRootFilesystem) {
        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext runAsGroup(Long runAsGroup) {

        this.runAsGroup = runAsGroup;
        return this;
    }

    /**
     * Get runAsGroup
     *
     * @return runAsGroup
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Long getRunAsGroup() {
        return runAsGroup;
    }


    public void setRunAsGroup(Long runAsGroup) {
        this.runAsGroup = runAsGroup;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext runAsNonRoot(Boolean runAsNonRoot) {

        this.runAsNonRoot = runAsNonRoot;
        return this;
    }

    /**
     * Get runAsNonRoot
     *
     * @return runAsNonRoot
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getRunAsNonRoot() {
        return runAsNonRoot;
    }


    public void setRunAsNonRoot(Boolean runAsNonRoot) {
        this.runAsNonRoot = runAsNonRoot;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext runAsUser(Long runAsUser) {

        this.runAsUser = runAsUser;
        return this;
    }

    /**
     * Get runAsUser
     *
     * @return runAsUser
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Long getRunAsUser() {
        return runAsUser;
    }


    public void setRunAsUser(Long runAsUser) {
        this.runAsUser = runAsUser;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext seLinuxOptions(V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions seLinuxOptions) {

        this.seLinuxOptions = seLinuxOptions;
        return this;
    }

    /**
     * Get seLinuxOptions
     *
     * @return seLinuxOptions
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions getSeLinuxOptions() {
        return seLinuxOptions;
    }


    public void setSeLinuxOptions(V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions seLinuxOptions) {
        this.seLinuxOptions = seLinuxOptions;
    }


    public V1beta2SparkApplicationSpecDriverSecurityContext windowsOptions(V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions windowsOptions) {

        this.windowsOptions = windowsOptions;
        return this;
    }

    /**
     * Get windowsOptions
     *
     * @return windowsOptions
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions getWindowsOptions() {
        return windowsOptions;
    }


    public void setWindowsOptions(V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions windowsOptions) {
        this.windowsOptions = windowsOptions;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDriverSecurityContext v1beta2SparkApplicationSpecDriverSecurityContext =
                (V1beta2SparkApplicationSpecDriverSecurityContext) o;
        return Objects.equals(this.allowPrivilegeEscalation,
                v1beta2SparkApplicationSpecDriverSecurityContext.allowPrivilegeEscalation) &&
                Objects.equals(this.capabilities, v1beta2SparkApplicationSpecDriverSecurityContext.capabilities) &&
                Objects.equals(this.privileged, v1beta2SparkApplicationSpecDriverSecurityContext.privileged) &&
                Objects.equals(this.procMount, v1beta2SparkApplicationSpecDriverSecurityContext.procMount) &&
                Objects.equals(this.readOnlyRootFilesystem,
                        v1beta2SparkApplicationSpecDriverSecurityContext.readOnlyRootFilesystem) &&
                Objects.equals(this.runAsGroup, v1beta2SparkApplicationSpecDriverSecurityContext.runAsGroup) &&
                Objects.equals(this.runAsNonRoot, v1beta2SparkApplicationSpecDriverSecurityContext.runAsNonRoot) &&
                Objects.equals(this.runAsUser, v1beta2SparkApplicationSpecDriverSecurityContext.runAsUser) &&
                Objects.equals(this.seLinuxOptions, v1beta2SparkApplicationSpecDriverSecurityContext.seLinuxOptions) &&
                Objects.equals(this.windowsOptions, v1beta2SparkApplicationSpecDriverSecurityContext.windowsOptions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowPrivilegeEscalation, capabilities, privileged, procMount, readOnlyRootFilesystem,
                runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, windowsOptions);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDriverSecurityContext {\n");
        sb.append("    allowPrivilegeEscalation: ").append(toIndentedString(allowPrivilegeEscalation)).append("\n");
        sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
        sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
        sb.append("    procMount: ").append(toIndentedString(procMount)).append("\n");
        sb.append("    readOnlyRootFilesystem: ").append(toIndentedString(readOnlyRootFilesystem)).append("\n");
        sb.append("    runAsGroup: ").append(toIndentedString(runAsGroup)).append("\n");
        sb.append("    runAsNonRoot: ").append(toIndentedString(runAsNonRoot)).append("\n");
        sb.append("    runAsUser: ").append(toIndentedString(runAsUser)).append("\n");
        sb.append("    seLinuxOptions: ").append(toIndentedString(seLinuxOptions)).append("\n");
        sb.append("    windowsOptions: ").append(toIndentedString(windowsOptions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

