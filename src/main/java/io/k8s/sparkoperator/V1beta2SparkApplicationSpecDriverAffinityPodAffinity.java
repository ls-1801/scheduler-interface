package io.k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDriverAffinityPodAffinity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDriverAffinityPodAffinity {

    private List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution> preferredDuringSchedulingIgnoredDuringExecution = null;


    private List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm> requiredDuringSchedulingIgnoredDuringExecution = null;


    public V1beta2SparkApplicationSpecDriverAffinityPodAffinity preferredDuringSchedulingIgnoredDuringExecution(List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution> preferredDuringSchedulingIgnoredDuringExecution) {

        this.preferredDuringSchedulingIgnoredDuringExecution = preferredDuringSchedulingIgnoredDuringExecution;
        return this;
    }

    public V1beta2SparkApplicationSpecDriverAffinityPodAffinity addPreferredDuringSchedulingIgnoredDuringExecutionItem(V1beta2SparkApplicationSpecDriverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution preferredDuringSchedulingIgnoredDuringExecutionItem) {
        if (this.preferredDuringSchedulingIgnoredDuringExecution == null) {
            this.preferredDuringSchedulingIgnoredDuringExecution = new ArrayList<>();
        }
        this.preferredDuringSchedulingIgnoredDuringExecution.add(preferredDuringSchedulingIgnoredDuringExecutionItem);
        return this;
    }

    /**
     * Get preferredDuringSchedulingIgnoredDuringExecution
     *
     * @return preferredDuringSchedulingIgnoredDuringExecution
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution> getPreferredDuringSchedulingIgnoredDuringExecution() {
        return preferredDuringSchedulingIgnoredDuringExecution;
    }


    public void setPreferredDuringSchedulingIgnoredDuringExecution(List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution> preferredDuringSchedulingIgnoredDuringExecution) {
        this.preferredDuringSchedulingIgnoredDuringExecution = preferredDuringSchedulingIgnoredDuringExecution;
    }


    public V1beta2SparkApplicationSpecDriverAffinityPodAffinity requiredDuringSchedulingIgnoredDuringExecution(List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm> requiredDuringSchedulingIgnoredDuringExecution) {

        this.requiredDuringSchedulingIgnoredDuringExecution = requiredDuringSchedulingIgnoredDuringExecution;
        return this;
    }

    public V1beta2SparkApplicationSpecDriverAffinityPodAffinity addRequiredDuringSchedulingIgnoredDuringExecutionItem(V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm requiredDuringSchedulingIgnoredDuringExecutionItem) {
        if (this.requiredDuringSchedulingIgnoredDuringExecution == null) {
            this.requiredDuringSchedulingIgnoredDuringExecution = new ArrayList<>();
        }
        this.requiredDuringSchedulingIgnoredDuringExecution.add(requiredDuringSchedulingIgnoredDuringExecutionItem);
        return this;
    }

    /**
     * Get requiredDuringSchedulingIgnoredDuringExecution
     *
     * @return requiredDuringSchedulingIgnoredDuringExecution
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm> getRequiredDuringSchedulingIgnoredDuringExecution() {
        return requiredDuringSchedulingIgnoredDuringExecution;
    }


    public void setRequiredDuringSchedulingIgnoredDuringExecution(List<V1beta2SparkApplicationSpecDriverAffinityPodAffinityPodAffinityTerm> requiredDuringSchedulingIgnoredDuringExecution) {
        this.requiredDuringSchedulingIgnoredDuringExecution = requiredDuringSchedulingIgnoredDuringExecution;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDriverAffinityPodAffinity v1beta2SparkApplicationSpecDriverAffinityPodAffinity =
                (V1beta2SparkApplicationSpecDriverAffinityPodAffinity) o;
        return Objects.equals(this.preferredDuringSchedulingIgnoredDuringExecution,
                v1beta2SparkApplicationSpecDriverAffinityPodAffinity.preferredDuringSchedulingIgnoredDuringExecution) &&
                Objects.equals(this.requiredDuringSchedulingIgnoredDuringExecution,
                        v1beta2SparkApplicationSpecDriverAffinityPodAffinity.requiredDuringSchedulingIgnoredDuringExecution);
    }

    @Override
    public int hashCode() {
        return Objects.hash(preferredDuringSchedulingIgnoredDuringExecution,
                requiredDuringSchedulingIgnoredDuringExecution);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDriverAffinityPodAffinity {\n");
        sb.append("    preferredDuringSchedulingIgnoredDuringExecution: ")
          .append(toIndentedString(preferredDuringSchedulingIgnoredDuringExecution)).append("\n");
        sb.append("    requiredDuringSchedulingIgnoredDuringExecution: ")
          .append(toIndentedString(requiredDuringSchedulingIgnoredDuringExecution)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

