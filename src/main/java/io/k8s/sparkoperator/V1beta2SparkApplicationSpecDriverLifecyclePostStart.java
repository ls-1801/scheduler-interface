package io.k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDriverLifecyclePostStart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDriverLifecyclePostStart {

    private V1beta2SparkApplicationSpecDriverLifecyclePostStartExec exec;


    private V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGet httpGet;


    private V1beta2SparkApplicationSpecDriverLifecyclePostStartTcpSocket tcpSocket;


    public V1beta2SparkApplicationSpecDriverLifecyclePostStart exec(V1beta2SparkApplicationSpecDriverLifecyclePostStartExec exec) {

        this.exec = exec;
        return this;
    }

    /**
     * Get exec
     *
     * @return exec
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverLifecyclePostStartExec getExec() {
        return exec;
    }


    public void setExec(V1beta2SparkApplicationSpecDriverLifecyclePostStartExec exec) {
        this.exec = exec;
    }


    public V1beta2SparkApplicationSpecDriverLifecyclePostStart httpGet(V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGet httpGet) {

        this.httpGet = httpGet;
        return this;
    }

    /**
     * Get httpGet
     *
     * @return httpGet
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGet getHttpGet() {
        return httpGet;
    }


    public void setHttpGet(V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGet httpGet) {
        this.httpGet = httpGet;
    }


    public V1beta2SparkApplicationSpecDriverLifecyclePostStart tcpSocket(V1beta2SparkApplicationSpecDriverLifecyclePostStartTcpSocket tcpSocket) {

        this.tcpSocket = tcpSocket;
        return this;
    }

    /**
     * Get tcpSocket
     *
     * @return tcpSocket
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverLifecyclePostStartTcpSocket getTcpSocket() {
        return tcpSocket;
    }


    public void setTcpSocket(V1beta2SparkApplicationSpecDriverLifecyclePostStartTcpSocket tcpSocket) {
        this.tcpSocket = tcpSocket;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDriverLifecyclePostStart v1beta2SparkApplicationSpecDriverLifecyclePostStart =
                (V1beta2SparkApplicationSpecDriverLifecyclePostStart) o;
        return Objects.equals(this.exec, v1beta2SparkApplicationSpecDriverLifecyclePostStart.exec) &&
                Objects.equals(this.httpGet, v1beta2SparkApplicationSpecDriverLifecyclePostStart.httpGet) &&
                Objects.equals(this.tcpSocket, v1beta2SparkApplicationSpecDriverLifecyclePostStart.tcpSocket);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exec, httpGet, tcpSocket);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDriverLifecyclePostStart {\n");
        sb.append("    exec: ").append(toIndentedString(exec)).append("\n");
        sb.append("    httpGet: ").append(toIndentedString(httpGet)).append("\n");
        sb.append("    tcpSocket: ").append(toIndentedString(tcpSocket)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

