package io.k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecRbd
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecRbd {

    private String fsType;


    private String image;


    private String keyring;


    private List<String> monitors = new ArrayList<>();


    private String pool;


    private Boolean readOnly;


    private V1beta2SparkApplicationSpecCephfsSecretRef secretRef;


    private String user;


    public V1beta2SparkApplicationSpecRbd fsType(String fsType) {

        this.fsType = fsType;
        return this;
    }

    /**
     * Get fsType
     *
     * @return fsType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getFsType() {
        return fsType;
    }


    public void setFsType(String fsType) {
        this.fsType = fsType;
    }


    public V1beta2SparkApplicationSpecRbd image(String image) {

        this.image = image;
        return this;
    }

    /**
     * Get image
     *
     * @return image
     **/
    @ApiModelProperty(required = true, value = "")

    public String getImage() {
        return image;
    }


    public void setImage(String image) {
        this.image = image;
    }


    public V1beta2SparkApplicationSpecRbd keyring(String keyring) {

        this.keyring = keyring;
        return this;
    }

    /**
     * Get keyring
     *
     * @return keyring
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getKeyring() {
        return keyring;
    }


    public void setKeyring(String keyring) {
        this.keyring = keyring;
    }


    public V1beta2SparkApplicationSpecRbd monitors(List<String> monitors) {

        this.monitors = monitors;
        return this;
    }

    public V1beta2SparkApplicationSpecRbd addMonitorsItem(String monitorsItem) {
        this.monitors.add(monitorsItem);
        return this;
    }

    /**
     * Get monitors
     *
     * @return monitors
     **/
    @ApiModelProperty(required = true, value = "")

    public List<String> getMonitors() {
        return monitors;
    }


    public void setMonitors(List<String> monitors) {
        this.monitors = monitors;
    }


    public V1beta2SparkApplicationSpecRbd pool(String pool) {

        this.pool = pool;
        return this;
    }

    /**
     * Get pool
     *
     * @return pool
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getPool() {
        return pool;
    }


    public void setPool(String pool) {
        this.pool = pool;
    }


    public V1beta2SparkApplicationSpecRbd readOnly(Boolean readOnly) {

        this.readOnly = readOnly;
        return this;
    }

    /**
     * Get readOnly
     *
     * @return readOnly
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getReadOnly() {
        return readOnly;
    }


    public void setReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
    }


    public V1beta2SparkApplicationSpecRbd secretRef(V1beta2SparkApplicationSpecCephfsSecretRef secretRef) {

        this.secretRef = secretRef;
        return this;
    }

    /**
     * Get secretRef
     *
     * @return secretRef
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecCephfsSecretRef getSecretRef() {
        return secretRef;
    }


    public void setSecretRef(V1beta2SparkApplicationSpecCephfsSecretRef secretRef) {
        this.secretRef = secretRef;
    }


    public V1beta2SparkApplicationSpecRbd user(String user) {

        this.user = user;
        return this;
    }

    /**
     * Get user
     *
     * @return user
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getUser() {
        return user;
    }


    public void setUser(String user) {
        this.user = user;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecRbd v1beta2SparkApplicationSpecRbd = (V1beta2SparkApplicationSpecRbd) o;
        return Objects.equals(this.fsType, v1beta2SparkApplicationSpecRbd.fsType) &&
                Objects.equals(this.image, v1beta2SparkApplicationSpecRbd.image) &&
                Objects.equals(this.keyring, v1beta2SparkApplicationSpecRbd.keyring) &&
                Objects.equals(this.monitors, v1beta2SparkApplicationSpecRbd.monitors) &&
                Objects.equals(this.pool, v1beta2SparkApplicationSpecRbd.pool) &&
                Objects.equals(this.readOnly, v1beta2SparkApplicationSpecRbd.readOnly) &&
                Objects.equals(this.secretRef, v1beta2SparkApplicationSpecRbd.secretRef) &&
                Objects.equals(this.user, v1beta2SparkApplicationSpecRbd.user);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fsType, image, keyring, monitors, pool, readOnly, secretRef, user);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecRbd {\n");
        sb.append("    fsType: ").append(toIndentedString(fsType)).append("\n");
        sb.append("    image: ").append(toIndentedString(image)).append("\n");
        sb.append("    keyring: ").append(toIndentedString(keyring)).append("\n");
        sb.append("    monitors: ").append(toIndentedString(monitors)).append("\n");
        sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
        sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
        sb.append("    secretRef: ").append(toIndentedString(secretRef)).append("\n");
        sb.append("    user: ").append(toIndentedString(user)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

