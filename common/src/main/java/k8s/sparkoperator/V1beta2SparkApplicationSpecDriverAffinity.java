package k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDriverAffinity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDriverAffinity {

    private V1beta2SparkApplicationSpecDriverAffinityNodeAffinity nodeAffinity;


    private V1beta2SparkApplicationSpecDriverAffinityPodAffinity podAffinity;


    private V1beta2SparkApplicationSpecDriverAffinityPodAffinity podAntiAffinity;


    public V1beta2SparkApplicationSpecDriverAffinity nodeAffinity(V1beta2SparkApplicationSpecDriverAffinityNodeAffinity nodeAffinity) {

        this.nodeAffinity = nodeAffinity;
        return this;
    }

    /**
     * Get nodeAffinity
     *
     * @return nodeAffinity
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverAffinityNodeAffinity getNodeAffinity() {
        return nodeAffinity;
    }


    public void setNodeAffinity(V1beta2SparkApplicationSpecDriverAffinityNodeAffinity nodeAffinity) {
        this.nodeAffinity = nodeAffinity;
    }


    public V1beta2SparkApplicationSpecDriverAffinity podAffinity(V1beta2SparkApplicationSpecDriverAffinityPodAffinity podAffinity) {

        this.podAffinity = podAffinity;
        return this;
    }

    /**
     * Get podAffinity
     *
     * @return podAffinity
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverAffinityPodAffinity getPodAffinity() {
        return podAffinity;
    }


    public void setPodAffinity(V1beta2SparkApplicationSpecDriverAffinityPodAffinity podAffinity) {
        this.podAffinity = podAffinity;
    }


    public V1beta2SparkApplicationSpecDriverAffinity podAntiAffinity(V1beta2SparkApplicationSpecDriverAffinityPodAffinity podAntiAffinity) {

        this.podAntiAffinity = podAntiAffinity;
        return this;
    }

    /**
     * Get podAntiAffinity
     *
     * @return podAntiAffinity
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverAffinityPodAffinity getPodAntiAffinity() {
        return podAntiAffinity;
    }


    public void setPodAntiAffinity(V1beta2SparkApplicationSpecDriverAffinityPodAffinity podAntiAffinity) {
        this.podAntiAffinity = podAntiAffinity;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDriverAffinity v1beta2SparkApplicationSpecDriverAffinity =
                (V1beta2SparkApplicationSpecDriverAffinity) o;
        return Objects.equals(this.nodeAffinity, v1beta2SparkApplicationSpecDriverAffinity.nodeAffinity) &&
                Objects.equals(this.podAffinity, v1beta2SparkApplicationSpecDriverAffinity.podAffinity) &&
                Objects.equals(this.podAntiAffinity, v1beta2SparkApplicationSpecDriverAffinity.podAntiAffinity);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nodeAffinity, podAffinity, podAntiAffinity);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDriverAffinity {\n");
        sb.append("    nodeAffinity: ").append(toIndentedString(nodeAffinity)).append("\n");
        sb.append("    podAffinity: ").append(toIndentedString(podAffinity)).append("\n");
        sb.append("    podAntiAffinity: ").append(toIndentedString(podAntiAffinity)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

