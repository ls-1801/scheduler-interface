package k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecBatchSchedulerOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecBatchSchedulerOptions {

    private String priorityClassName;


    private String queue;


    private Map<String, Object> resources = null;


    public V1beta2SparkApplicationSpecBatchSchedulerOptions priorityClassName(String priorityClassName) {

        this.priorityClassName = priorityClassName;
        return this;
    }

    /**
     * Get priorityClassName
     *
     * @return priorityClassName
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getPriorityClassName() {
        return priorityClassName;
    }


    public void setPriorityClassName(String priorityClassName) {
        this.priorityClassName = priorityClassName;
    }


    public V1beta2SparkApplicationSpecBatchSchedulerOptions queue(String queue) {

        this.queue = queue;
        return this;
    }

    /**
     * Get queue
     *
     * @return queue
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getQueue() {
        return queue;
    }


    public void setQueue(String queue) {
        this.queue = queue;
    }


    public V1beta2SparkApplicationSpecBatchSchedulerOptions resources(Map<String, Object> resources) {

        this.resources = resources;
        return this;
    }

    public V1beta2SparkApplicationSpecBatchSchedulerOptions putResourcesItem(String key, Object resourcesItem) {
        if (this.resources == null) {
            this.resources = new HashMap<>();
        }
        this.resources.put(key, resourcesItem);
        return this;
    }

    /**
     * Get resources
     *
     * @return resources
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Map<String, Object> getResources() {
        return resources;
    }


    public void setResources(Map<String, Object> resources) {
        this.resources = resources;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecBatchSchedulerOptions v1beta2SparkApplicationSpecBatchSchedulerOptions =
                (V1beta2SparkApplicationSpecBatchSchedulerOptions) o;
        return Objects.equals(this.priorityClassName,
                v1beta2SparkApplicationSpecBatchSchedulerOptions.priorityClassName) &&
                Objects.equals(this.queue, v1beta2SparkApplicationSpecBatchSchedulerOptions.queue) &&
                Objects.equals(this.resources, v1beta2SparkApplicationSpecBatchSchedulerOptions.resources);
    }

    @Override
    public int hashCode() {
        return Objects.hash(priorityClassName, queue, resources);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecBatchSchedulerOptions {\n");
        sb.append("    priorityClassName: ").append(toIndentedString(priorityClassName)).append("\n");
        sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
        sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

