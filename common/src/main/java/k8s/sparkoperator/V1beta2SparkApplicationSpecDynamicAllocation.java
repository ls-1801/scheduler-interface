package k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDynamicAllocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDynamicAllocation {

    private Boolean enabled;


    private Integer initialExecutors;


    private Integer maxExecutors;


    private Integer minExecutors;


    private Long shuffleTrackingTimeout;


    public V1beta2SparkApplicationSpecDynamicAllocation enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getEnabled() {
        return enabled;
    }


    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }


    public V1beta2SparkApplicationSpecDynamicAllocation initialExecutors(Integer initialExecutors) {

        this.initialExecutors = initialExecutors;
        return this;
    }

    /**
     * Get initialExecutors
     *
     * @return initialExecutors
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Integer getInitialExecutors() {
        return initialExecutors;
    }


    public void setInitialExecutors(Integer initialExecutors) {
        this.initialExecutors = initialExecutors;
    }


    public V1beta2SparkApplicationSpecDynamicAllocation maxExecutors(Integer maxExecutors) {

        this.maxExecutors = maxExecutors;
        return this;
    }

    /**
     * Get maxExecutors
     *
     * @return maxExecutors
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Integer getMaxExecutors() {
        return maxExecutors;
    }


    public void setMaxExecutors(Integer maxExecutors) {
        this.maxExecutors = maxExecutors;
    }


    public V1beta2SparkApplicationSpecDynamicAllocation minExecutors(Integer minExecutors) {

        this.minExecutors = minExecutors;
        return this;
    }

    /**
     * Get minExecutors
     *
     * @return minExecutors
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Integer getMinExecutors() {
        return minExecutors;
    }


    public void setMinExecutors(Integer minExecutors) {
        this.minExecutors = minExecutors;
    }


    public V1beta2SparkApplicationSpecDynamicAllocation shuffleTrackingTimeout(Long shuffleTrackingTimeout) {

        this.shuffleTrackingTimeout = shuffleTrackingTimeout;
        return this;
    }

    /**
     * Get shuffleTrackingTimeout
     *
     * @return shuffleTrackingTimeout
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Long getShuffleTrackingTimeout() {
        return shuffleTrackingTimeout;
    }


    public void setShuffleTrackingTimeout(Long shuffleTrackingTimeout) {
        this.shuffleTrackingTimeout = shuffleTrackingTimeout;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDynamicAllocation v1beta2SparkApplicationSpecDynamicAllocation =
                (V1beta2SparkApplicationSpecDynamicAllocation) o;
        return Objects.equals(this.enabled, v1beta2SparkApplicationSpecDynamicAllocation.enabled) &&
                Objects.equals(this.initialExecutors, v1beta2SparkApplicationSpecDynamicAllocation.initialExecutors) &&
                Objects.equals(this.maxExecutors, v1beta2SparkApplicationSpecDynamicAllocation.maxExecutors) &&
                Objects.equals(this.minExecutors, v1beta2SparkApplicationSpecDynamicAllocation.minExecutors) &&
                Objects.equals(this.shuffleTrackingTimeout,
                        v1beta2SparkApplicationSpecDynamicAllocation.shuffleTrackingTimeout);
    }

    @Override
    public int hashCode() {
        return Objects.hash(enabled, initialExecutors, maxExecutors, minExecutors, shuffleTrackingTimeout);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDynamicAllocation {\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    initialExecutors: ").append(toIndentedString(initialExecutors)).append("\n");
        sb.append("    maxExecutors: ").append(toIndentedString(maxExecutors)).append("\n");
        sb.append("    minExecutors: ").append(toIndentedString(minExecutors)).append("\n");
        sb.append("    shuffleTrackingTimeout: ").append(toIndentedString(shuffleTrackingTimeout)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

