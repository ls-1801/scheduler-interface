package k8s.sparkoperator;/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * V1beta2SparkApplicationSpecDriverPodSecurityContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-30T13:32" +
        ":37.998Z[Etc/UTC]")
public class V1beta2SparkApplicationSpecDriverPodSecurityContext {

    private Long fsGroup;


    private Long runAsGroup;


    private Boolean runAsNonRoot;


    private Long runAsUser;


    private V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions seLinuxOptions;


    private List<Long> supplementalGroups = null;


    private List<V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGetHttpHeaders> sysctls = null;


    private V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions windowsOptions;


    public V1beta2SparkApplicationSpecDriverPodSecurityContext fsGroup(Long fsGroup) {

        this.fsGroup = fsGroup;
        return this;
    }

    /**
     * Get fsGroup
     *
     * @return fsGroup
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Long getFsGroup() {
        return fsGroup;
    }


    public void setFsGroup(Long fsGroup) {
        this.fsGroup = fsGroup;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext runAsGroup(Long runAsGroup) {

        this.runAsGroup = runAsGroup;
        return this;
    }

    /**
     * Get runAsGroup
     *
     * @return runAsGroup
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Long getRunAsGroup() {
        return runAsGroup;
    }


    public void setRunAsGroup(Long runAsGroup) {
        this.runAsGroup = runAsGroup;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext runAsNonRoot(Boolean runAsNonRoot) {

        this.runAsNonRoot = runAsNonRoot;
        return this;
    }

    /**
     * Get runAsNonRoot
     *
     * @return runAsNonRoot
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Boolean getRunAsNonRoot() {
        return runAsNonRoot;
    }


    public void setRunAsNonRoot(Boolean runAsNonRoot) {
        this.runAsNonRoot = runAsNonRoot;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext runAsUser(Long runAsUser) {

        this.runAsUser = runAsUser;
        return this;
    }

    /**
     * Get runAsUser
     *
     * @return runAsUser
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Long getRunAsUser() {
        return runAsUser;
    }


    public void setRunAsUser(Long runAsUser) {
        this.runAsUser = runAsUser;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext seLinuxOptions(V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions seLinuxOptions) {

        this.seLinuxOptions = seLinuxOptions;
        return this;
    }

    /**
     * Get seLinuxOptions
     *
     * @return seLinuxOptions
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions getSeLinuxOptions() {
        return seLinuxOptions;
    }


    public void setSeLinuxOptions(V1beta2SparkApplicationSpecDriverSecurityContextSeLinuxOptions seLinuxOptions) {
        this.seLinuxOptions = seLinuxOptions;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext supplementalGroups(List<Long> supplementalGroups) {

        this.supplementalGroups = supplementalGroups;
        return this;
    }

    public V1beta2SparkApplicationSpecDriverPodSecurityContext addSupplementalGroupsItem(Long supplementalGroupsItem) {
        if (this.supplementalGroups == null) {
            this.supplementalGroups = new ArrayList<>();
        }
        this.supplementalGroups.add(supplementalGroupsItem);
        return this;
    }

    /**
     * Get supplementalGroups
     *
     * @return supplementalGroups
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<Long> getSupplementalGroups() {
        return supplementalGroups;
    }


    public void setSupplementalGroups(List<Long> supplementalGroups) {
        this.supplementalGroups = supplementalGroups;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext sysctls(List<V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGetHttpHeaders> sysctls) {

        this.sysctls = sysctls;
        return this;
    }

    public V1beta2SparkApplicationSpecDriverPodSecurityContext addSysctlsItem(V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGetHttpHeaders sysctlsItem) {
        if (this.sysctls == null) {
            this.sysctls = new ArrayList<>();
        }
        this.sysctls.add(sysctlsItem);
        return this;
    }

    /**
     * Get sysctls
     *
     * @return sysctls
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGetHttpHeaders> getSysctls() {
        return sysctls;
    }


    public void setSysctls(List<V1beta2SparkApplicationSpecDriverLifecyclePostStartHttpGetHttpHeaders> sysctls) {
        this.sysctls = sysctls;
    }


    public V1beta2SparkApplicationSpecDriverPodSecurityContext windowsOptions(V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions windowsOptions) {

        this.windowsOptions = windowsOptions;
        return this;
    }

    /**
     * Get windowsOptions
     *
     * @return windowsOptions
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions getWindowsOptions() {
        return windowsOptions;
    }


    public void setWindowsOptions(V1beta2SparkApplicationSpecDriverSecurityContextWindowsOptions windowsOptions) {
        this.windowsOptions = windowsOptions;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta2SparkApplicationSpecDriverPodSecurityContext v1beta2SparkApplicationSpecDriverPodSecurityContext =
                (V1beta2SparkApplicationSpecDriverPodSecurityContext) o;
        return Objects.equals(this.fsGroup, v1beta2SparkApplicationSpecDriverPodSecurityContext.fsGroup) &&
                Objects.equals(this.runAsGroup, v1beta2SparkApplicationSpecDriverPodSecurityContext.runAsGroup) &&
                Objects.equals(this.runAsNonRoot, v1beta2SparkApplicationSpecDriverPodSecurityContext.runAsNonRoot) &&
                Objects.equals(this.runAsUser, v1beta2SparkApplicationSpecDriverPodSecurityContext.runAsUser) &&
                Objects.equals(this.seLinuxOptions,
                        v1beta2SparkApplicationSpecDriverPodSecurityContext.seLinuxOptions) &&
                Objects.equals(this.supplementalGroups,
                        v1beta2SparkApplicationSpecDriverPodSecurityContext.supplementalGroups) &&
                Objects.equals(this.sysctls, v1beta2SparkApplicationSpecDriverPodSecurityContext.sysctls) &&
                Objects.equals(this.windowsOptions, v1beta2SparkApplicationSpecDriverPodSecurityContext.windowsOptions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fsGroup, runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, supplementalGroups, sysctls
                , windowsOptions);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta2SparkApplicationSpecDriverPodSecurityContext {\n");
        sb.append("    fsGroup: ").append(toIndentedString(fsGroup)).append("\n");
        sb.append("    runAsGroup: ").append(toIndentedString(runAsGroup)).append("\n");
        sb.append("    runAsNonRoot: ").append(toIndentedString(runAsNonRoot)).append("\n");
        sb.append("    runAsUser: ").append(toIndentedString(runAsUser)).append("\n");
        sb.append("    seLinuxOptions: ").append(toIndentedString(seLinuxOptions)).append("\n");
        sb.append("    supplementalGroups: ").append(toIndentedString(supplementalGroups)).append("\n");
        sb.append("    sysctls: ").append(toIndentedString(sysctls)).append("\n");
        sb.append("    windowsOptions: ").append(toIndentedString(windowsOptions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

